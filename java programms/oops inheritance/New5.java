/* automatically complier genrate the super keyword at
the starting of the constructor only when there is no 
this or super keyword is declared inside the constructor
*/
   // here we are not using this(); or super(); keyword in any constructor
class Parent 
{
Parent ()
{
System.out.println("zero argument constructor in parent class");
}
}
class Child extends Parent
{
Child ()
{
System.out.println("zero argument const in child class");
}
Child (int a)
{ 

// super(); this code is generated by the compiler itself
 
System.out.println("zero argument const in child class");
}
public static void main(String []args)
{
new Child(2);
}
}
 /*
output:
F:\java by dragon\java programms>java Child
zero argument constructor in parent class
zero argument const in child class
*/
  // when you use "this()" keyword in "child(int a )" 
/*
output:F:\java by dragon\java programms>java Child
zero argument constructor in parent class
zero argument const in child class
zero argument const in child class
*/

/*class Parent 
{
Parent ()
{
System.out.println("zero argument constructor in parent class");
}
}
class Child extends Parent
{
Child ()
{
// super(); this code is generated by the compiler itself

System.out.println("zero argument const in child class");
}
Child (int a)
{ 

// super(); this code is generated by the compiler itself
 
System.out.println("zero argument const in child class");
}
public static void main(String []args)
{
new Child();
new Child(2);
}
}
 

output:
F:\java by dragon\java programms>java Child
zero argument constructor in parent class
zero argument const in child class
zero argument constructor in parent class
zero argument const in child class


 here we are not declaring any super or this keyword so complier will automatically 
generate the super keyword in both of the constructors. the above given result will be printed.
*/
